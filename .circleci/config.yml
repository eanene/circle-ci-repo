
version: 2.1
orbs:
  terraform: "circleci/terraform@3.2.0"
# Define the jobs we want to run for this project
parameters:
  modules:
#         type: enum
    type: string
    default: "vpc" 
#         enum: ["vpc", "subnet", "s3" ]
  env:
      type: string
      default: "dev"
jobs:
  initialize: 
    docker:
      - image: hashicorp/terraform
    working_directory: ~/circle-ci-repo
    
    steps:      
      - checkout
      - run: 
          name: terraform init and plan
          command: |           
            export TF_VAR_env=<< pipeline.parameters.env >>
            echo << pipeline.parameters.env >>
            echo << pipeline.parameters.modules >>
            cd environment/<< pipeline.parameters.modules >>
            terraform init -reconfigure -backend-config=backend/<< pipeline.parameters.env >>.conf
            terraform plan -var env=$ENV -out=<< pipeline.parameters.modules >>.tfplan
            pwd && ls -al
    #       - store_artifacts:
    #             path: ~/circle-ci-repo/environment/vpc/vpc.tfplan
    #             destination: artifact-file
      - persist_to_workspace:
          root: ~/circle-ci-repo
          paths: environment/<< pipeline.parameters.modules >>/<< pipeline.parameters.modules >>.tfplan

  vpc_apply: &vpc
    docker:
      - image: hashicorp/terraform
    working_directory: ~/circle-ci-repo
    steps:
      - checkout
#       - attach_workspace:
#            at: ~/tf-class-repo
      - run: 
          name: terraform apply
          command: |
            export TF_VAR_env=$ENV
            cd environment/<< pipeline.parameters.modules >>
            terraform init -reconfigure -backend-config=backend/<< pipeline.parameters.env >>.conf
            terraform init && terraform apply -auto-approve
            
  subnet_apply: &subnet
      docker:
        - image: hashicorp/terraform
      working_directory: ~/circle-ci-repo 
      steps:
         - checkout
         - run: echo "subnet example!!"
  
  s3_apply: &s3
      docker:
        - image: hashicorp/terraform
      working_directory: ~/circle-ci-repo 
      steps:
         - checkout
         - run: echo "s3 example!!"
  deploy_all:
      <<: *vpc
      <<: *subnet
      <<: *s3

      docker:
        - image: hashicorp/terraform
      working_directory: ~/circle-ci-repo 
      steps:
          - checkout

        
      


# Orchestrate our job run sequence
workflows:
  vpc_workflow:
    when:
       condition:
          and:
            - equal: [ vpc, << pipeline.parameters.modules >> ]
    jobs:
      - initialize
      - approve_vpc_plan:
          type: approval
          requires:
            - initialize
      - vpc_apply:
          requires:
            - approve_vpc_plan
            
  subnet_workflow:
    when:
       condition:
          and:
            - equal: [ subnet, << pipeline.parameters.modules >> ]
          or:
            - equal: [ all, << pipeline.parameters.modules >> ]
    jobs:
      - initialize
      - approve_subnet_plan:
          type: approval
          requires:
            - initialize
      - subnet_apply:
          requires:
            - approve_subnet_plan
  
  all_modules_workflow:
    when:
      condition:
          equal: [ all, << pipeline.parameters.modules >> ]

    jobs:
      - initialize
      - vpc_apply:
          requires:
            - initialize
      - subnet_apply:
          requires:
            - initialize
      - s3_apply:
          when:
            condition:
              and:
                  - equal: [ s3, << pipeline.parameters.modules >> ]
              or:
                  - equal: [ all, << pipeline.parameters.modules >> ]
          requires:
            - initialize
      - approve_all:  # when you figure out how to run only all modules, remove this step and use requires below
          type: approval
          requires:
            - vpc_apply
            - subnet_apply
            - s3_apply
      - deploy_all:
          requires:
            # - vpc_apply
            # - subnet_apply
            # - s3_apply
            - approve_all

            
            
            
            
    
